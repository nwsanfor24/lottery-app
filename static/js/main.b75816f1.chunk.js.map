{"version":3,"sources":["actions/types.js","components/Post.js","actions/postActions.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["FETCH_POSTS","Post","this","props","fetchPosts","title","data","posts","map","item","drawDate","drawNumber","bonus","winningNumbers","columns","options","filterType","Component","connect","state","items","dispatch","console","log","fetch","then","res","json","type","payload","draws","initialState","postReducer","action","combineReducers","middleware","thunk","store","createStore","rootReducer","applyMiddleware","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAAaA,EAAc,c,kBCKrBC,E,kLAEEC,KAAKC,MAAMC,e,+BAUX,OACI,cAAC,IAAD,CACIC,MAAO,8BACPC,KAAMJ,KAAKC,MAAMI,MAAMC,KAAI,SAAAC,GACvB,MAAO,CACHA,EAAKC,SACLD,EAAKE,WACLF,EAAKG,MACLH,EAAKI,mBAGbC,QAjBQ,CAAC,YAAa,cAAe,QAAS,mBAkB9CC,QAhBQ,CACZC,WAAY,kB,GATLC,aAkCJC,eAJS,SAAAC,GAAK,MAAK,CAC9BZ,MAAOY,EAAMZ,MAAMa,SAGiB,CAAEhB,WCrChB,kBAAM,SAAAiB,GAC5BC,QAAQC,IAAI,sBACZC,MAAM,qGACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAnB,GAAI,OAAIe,EAAS,CACnBO,KAAM5B,EACN6B,QAASvB,EAAKwB,cD+BXZ,CAAyCjB,G,0BErClD8B,EAAe,CACjBX,MAAO,IAiBIY,EAdK,WAAmC,IAAlCb,EAAiC,uDAAzBY,EAAcE,EAAW,uCAClD,OAAQA,EAAOL,MACX,KAAK5B,EAED,OADJsB,QAAQC,IAAI,WACD,2BACAJ,GADP,IAEIC,MAAOa,EAAOJ,UAGtB,QACI,OAAOV,ICZJe,cAAgB,CAC3B3B,MAAOyB,ICCLG,EAAa,CAACC,KAQLC,EANDC,YACVC,EALiB,GAOjBC,IAAe,WAAf,EAAmBL,ICKRM,MAVf,WACE,OACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,qBAAKK,UAAU,MAAf,SACE,cAAC,EAAD,SCEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b75816f1.chunk.js","sourcesContent":["export const FETCH_POSTS = 'FETCH_POSTS';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchPosts } from '../actions/postActions';\r\nimport MUIDataTable from 'mui-datatables';\r\n\r\nclass Post extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    render() {\r\n        const columns = [\"Draw Date\", \"Draw Number\", \"Bonus\", \"Winning Numbers\"];\r\n\r\n        const options = {\r\n            filterType: 'checkbox'\r\n        };\r\n\r\n        return (\r\n            <MUIDataTable\r\n                title={\"Massachusetts State Lottery\"}\r\n                data={this.props.posts.map(item => {\r\n                    return [\r\n                        item.drawDate,\r\n                        item.drawNumber,\r\n                        item.bonus,\r\n                        item.winningNumbers\r\n                    ]\r\n                })}\r\n                columns={columns}\r\n                options={options}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: state.posts.items\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Post);\r\n","import { FETCH_POSTS } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    console.log(\"it is being called\")\r\n    fetch('https://www.masslottery.com/rest/keno/getDrawsByDateRange?startDate=2020-09-18&endDate=2020-09-18')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({\r\n            type: FETCH_POSTS,\r\n            payload: data.draws\r\n        })\r\n    );\r\n}","import { FETCH_POSTS } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n}\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case FETCH_POSTS:\r\n        console.log('reducer');\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default postReducer;","import { combineReducers } from 'redux';\r\nimport postReducer from './postReducer';\r\n\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState, \r\n    applyMiddleware(...middleware)\r\n);\r\n\r\nexport default store;","import './App.css';\nimport Post from './components/Post';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Post />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}